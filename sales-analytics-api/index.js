const express = require('express');
const mongoose = require('mongoose');
const Sale = require('./Sale');

const app = express();
const PORT = 3000;

mongoose.connect('mongodb://localhost:27017/salesdb', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch(err => {
        console.error('Failed to connect to MongoDB:', err);
        process.exit(1);
    });

// ... Previous imports and setup

// Calculate and return the total revenue generated by all sales transactions
app.get('/api/sales/total-revenue', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $group: { _id: null, totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } } } }
      ]);
      res.json(result[0]);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Find and return the total quantity sold for each product
  app.get('/api/sales/quantity-by-product', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $group: { _id: '$product', totalQuantity: { $sum: '$quantity' } } }
      ]);
      res.json(result);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Retrieve the top 5 products with the highest total revenue
  app.get('/api/sales/top-products', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $group: { _id: '$product', totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } } } },
        { $sort: { totalRevenue: -1 } },
        { $limit: 5 }
      ]);
      res.json(result);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Calculate and return the average price of products sold
  app.get('/api/sales/average-price', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $group: { _id: null, averagePrice: { $avg: '$price' } } }
      ]);
      res.json(result[0]);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Group the sales data by month and year and calculate the total revenue for each month-year combination
  app.get('/api/sales/revenue-by-month', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        {
          $group: {
            _id: {
              year: { $year: '$date' },
              month: { $month: '$date' }
            },
            totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } }
          }
        }
      ]);
      res.json(result);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Find and return the product that had the highest quantity sold on a single day
  app.get('/api/sales/highest-quantity-sold', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $sort: { quantity: -1 } },
        { $limit: 1 }
      ]);
      res.json(result[0]);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Calculate and return the total salary expense for each department
  // Note: This assumes you have a 'department' field in your sales collection.
  app.get('/api/sales/department-salary-expense', async (req, res) => {
    try {
      const result = await Sale.aggregate([
        { $group: { _id: '$department', totalExpense: { $sum: { $multiply: ['$quantity', '$price'] } } } }
      ]);
      res.json(result);
    } catch (error) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // ... Rest of the server setup
  

// Add other endpoints similarly...

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
